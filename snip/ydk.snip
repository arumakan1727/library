snippet     snip
options     head
    //@@@@@@@@@@
    //@ snippet ${1}
    //@ alias   ${2}
    //@ options ${3}

snippet     random
options     head, indent
    random_device gen;
    mt19937 mt(gen());
    using RR = uniform_int_distribution<int>;

snippet     cout
abbr        cout << (...) << endl
    cout << (${1}) << endl;

snippet     yesno
abbr        yes, no
    cout << ((${1}) ? "yes" : "no") << endl;

snippet     YesNo
abbr        Yes, No
    cout << ((${1}) ? "Yes" : "No") << endl;

snippet     YESNO
abbr        Yes, No
    cout << ((${1}) ? "YES" : "NO") << endl;

snippet     Heap
abbr        priority_queue
options     head
    template<class T> using MaxHeap = priority_queue<T>;
    template<class T> using MinHeap = priority_queue<T, vector<T>, greater<T>>;

snippet     memset
abbr        memset()
options     head
    memset(${1}, ${2:0}, sizeof($1));

snippet     fi
abbr        first
options     word
    first

snippet     se
abbr        first
options     word
    second

snippet     eprintf
options     head
    #ifdef YDK
    #define eprintf(...) fprintf(stderr, __VA_ARGS__)
    #else
    #define eprintf(...)
    #endif

snippet     pb
abbr        push_back
options     word
    push_back(${1});

snippet     eb
abbr        emplace_back
options     word
    emplace_back(${1});

snippet     emp
abbr        emplace
options     word
    emplace(${1});

snippet     fastIO
alias       fastio cin.tie ios::sync_with_stdio
options     head
    cin.tie(nullptr); ios::sync_with_stdio(false);

snippet     fixed
alias       setprecision
options     word
    cout << fixed << setprecision(9);

snippet     header
abbr        mytemplate templateYDK
options     head
    // Custom Header {{{
    #define ALL(x) x.begin(), x.end()
    using namespace std;
    using i64 = long long;
    using pii = pair<i64, i64>;
    template<class A, class B>inline bool chmax(A &a, const B &b){return b>a ? a=b,1 : 0;}
    template<class A, class B>inline bool chmin(A &a, const B &b){return b<a ? a=b,1 : 0;}
    constexpr int INF  = 0x3f3f3f3f;
    constexpr i64 LINF = 0x3f3f3f3f3f3f3f3fLL;
    // }}}

