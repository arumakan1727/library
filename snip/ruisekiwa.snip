snippet     ruisekiwa
alias       partSum 
options     head 
    class Ruisekiwa : public vector<i64> { // {{{
        using super = vector<i64>;
        using super::super; // コンストラクタを継承
    
    public:
        inline void build() {
            const auto sz = super::size();
            for (int i = 1; i < sz; ++i) (*this)[i] += (*this)[i-1];
        }
    
        inline i64 sum(int r) const {
            return (r < 0) ? 0 : (*this)[r];
        }
    
        inline i64 sum(int l, int r) const {
            return sum(r) - sum(l - 1);
        }
    
        inline int lower_bound(i64 key) const {
            return std::lower_bound(super::begin(), super::end(), key) - super::begin();
        }
    };
    // }}}


snippet     ruisekiwa2d
options     head 
    class Ruisekiwa2D { // {{{
        vector<vector<i64>> s;
    public:
        Ruisekiwa2D() {}
        Ruisekiwa2D(int h, int w) : s(h+1, vector<i64>(w+1, 0)) {}
    
        inline void build() {
            const int h = s.size();
            const int w = s[0].size();
            for (int j = 1; j < w; ++j) {
                s[0][j] += s[0][j-1];
            }
            for (int i = 1; i < h; ++i) {
                s[i][0] += s[i-1][0];
                for (int j = 1; j < w; ++j) {
                    s[i][j] += s[i-1][j] + s[i][j-1] - s[i-1][j-1];
                }
            }
            return;
        }
    
        inline i64 at(int y, int x) const {
            return (y < 0) || (x < 0) ? 0 : s[y][x];
        }
    
        inline i64 sum(int sy, int sx, int gy, int gx) const {
            return s[gy][gx] - at(sy-1, gx) - at(gy, sx-1) + at(sy-1, sx-1);
        }
    
        inline void resize(int h, int w) { s.assign(h+1, vector<i64>(w+1, 0)); }
        inline const vector<i64>& operator[] (size_t i) const { return s[i]; }
        inline vector<i64>&       operator[] (size_t i)       { return s[i]; }
    }; // }}}


