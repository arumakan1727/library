snippet     ruisekiwa
alias       partSum 
options     head 
    class Ruisekiwa { // {{{
        using i64 = long long;
        vector<i64> s;
    public:
        Ruisekiwa() {}
    
        Ruisekiwa(size_t sz) : s(sz, 0) {}
    
        template<class Itr>
        Ruisekiwa(Itr begin, Itr end) { build(begin, end); }
    
        template<class Itr>
        inline void build(Itr begin, Itr end) {
            s.resize(end - begin);
            s[0] = *begin;
            for(int i = 1; begin+i != end; ++i) {
                s[i] = s[i-1] + *(begin + i);
            }
            return;
        }
    
        inline void build() {
            for (int i = 1; i < s.size(); ++i) {
                s[i] += s[i-1];
            }
        }
    
        inline i64 sum(int l, int r) const {
            if (l > r) swap(l, r);
            return s[min<int>(r, s.size()-1)] - (l <= 0 ? 0 : s[l-1]);
        }
        inline void resize(size_t sz)           { s.assign(sz, 0); }
        inline i64  operator[] (size_t i) const { return s[i]; }
        inline i64& operator[] (size_t i)       { return s[i]; }
    };
    // }}}


snippet     ruisekiwa2d
options     head 
    class Ruisekiwa2D { // {{{
        using i64 = long long;
        vector<vector<i64>> s;
    public:
        Ruisekiwa2D() {}
        Ruisekiwa2D(int h, int w) : s(h+1, vector<i64>(w+1, 0)) {}
    
        inline void build() {
            const int h = s.size();
            const int w = s[0].size();
            for (int j = 1; j < w; ++j) {
                s[0][j] += s[0][j-1];
            }
            for (int i = 1; i < h; ++i) {
                s[i][0] += s[i-1][0];
                for (int j = 1; j < w; ++j) {
                    s[i][j] += s[i-1][j] + s[i][j-1] - s[i-1][j-1];
                }
            }
            return;
        }
    
        inline i64 at(int y, int x) const {
            return (y < 0) || (x < 0) ? 0 : s[y][x];
        }
    
        inline i64 sum(int sy, int sx, int gy, int gx) const {
            return s[gy][gx] - at(sy-1, gx) - at(gy, sx-1) + at(sy-1, sx-1);
        }
    
        inline void resize(int h, int w) { s.assign(h+1, vector<i64>(w+1, 0)); }
        inline const vector<i64>& operator[] (size_t i) const { return s[i]; }
        inline vector<i64>&       operator[] (size_t i)       { return s[i]; }
    }; // }}}


